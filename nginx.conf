worker_processes auto;

user nobody nogroup;


#全局错误日志及PID文件
pid /tmp/nginx.pid;
error_log /tmp/nginx.error.log;

#工作模式及连接数上限
events {
#单个后台worker process进程的最大并发链接数
worker_connections 1024;
#epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
use epoll;
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
#设定mime类型,类型由mime.types文件定义
include mime.types;
default_type application/octet-stream;
#设定日志格式
log_format main '$remote_addr - $remote_user [$time_local] "$request" '
'$status $body_bytes_sent "$http_referer" '
'"$http_user_agent" "$http_x_forwarded_for"';

access_log off;

#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
#必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
sendfile on;
tcp_nopush on;
tcp_nodelay on;

#开启gzip压缩
gzip on;
gzip_min_length 1000;
gzip_proxied any;
gzip_types text/plain text/css text/xml
application/x-javascript application/xml
application/atom+xml text/javascript
keepalive_timeout 120;
		 server {
		 		 listen 80 default;

				 server_name _;

				 client_max_body_size 4G;
				 client_body_buffer_size 256k;
				 proxy_connect_timeout 1000;
				 proxy_send_timeout 1000;
				 proxy_read_timeout 1000;
				 proxy_buffer_size 256k;
				 proxy_buffers 4 256k;
                 proxy_busy_buffers_size 256k;
			     proxy_temp_file_write_size 256k;
		         proxy_next_upstream error timeout invalid_header http_500 http_503 http_404;
				 proxy_max_temp_file_size 128m;

		 		 # path for static files
  	   	 		 location /static/ {
		 		 		  alias  /home/bright/hchq/static/;
	     	     }
				 location /protected/ {
  				 		  internal;
    					  alias   /home/bright/hchq/temp/;
				 }
		 		 location / {
		 		 		  # checks for static file, if not found proxy to app
		 				  try_files $uri @proxy_to_app;
		 	     }

		 		 location @proxy_to_app {
				          proxy_redirect off;
		         		  proxy_set_header Host $host;
					      proxy_set_header X-Real-IP $remote_addr;
						  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

						  proxy_pass   http://localhost:8000;
		 		}

		 }
}
